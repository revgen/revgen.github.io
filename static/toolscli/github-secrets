#!/usr/bin/env python3
#==============================================================================
##
## The script is using to manage Github actions secrets: see all names, update secret values
## Note: GitHub api doesn't provide a functionality to see the existing secret values.
##
## Usage: {SCRIPT} <show|update> <repository name> [name] [file-with-secrets.json]
##
## The script need a personal access token to access the GitHub API.
## * Use a link https://github.com/settings/tokens to generate a new token with permissions:
##   [✓] repo - Full control of private repositories (all items)
##   [✓] workflow - Update GitHub Action workflows
##   [✓] read:org - Read org and team membership, read org projects
## * Save this token to the file ~/.config/.github-api.token
##
## Example file-with-secrets.json file with new secrets:
## {
##   "secrets": [
##     {"name": "KEY1", "value": "1234" },
##     {"name": "KEY2", "value": 0 },
##   ]
## }
#
# Author: Evgen Rusakov, https://github.com/revgen
#
# TODO:
# - Delete secrets
# - Synchronization of all items from a JSON file with GitHub repo secrets
# - Use encrypted JSON file
#==============================================================================
import json
import os
import sys
import urllib.request
from pathlib import Path
from base64 import b64encode
from nacl import encoding, public

error = lambda m: sys.stderr.write(f'{m}{os.linesep}')
debug = lambda m: sys.stderr.write(f'{m}{os.linesep}') if os.environ.get('DEBUG') == 'true' else False


def show_help():
    script_file = Path(__file__)
    for l in [l for l in script_file.read_text().replace(os.linesep, '\n').split('\n') if l.startswith('##')]:
        print(l.lstrip('#')[1:].replace('{SCRIPT}', script_file.name))
    sys.exit(1)


class GitHubSecrets:
    def __init__(self, repo):
        if not repo:
            raise ValueError('Incorrect parameters: repository name is required')
        self.repo = repo
        self.token_file = Path.home() / '.config' / '.github-api.token'
        if not self.token_file.exists():
            raise FileNotFoundError(f'File with GitHub token {self.token_file} not found.')

    def _api_repo_call(self, cmd, data=None):
        token = self.token_file.read_text().replace(' ', '').replace(os.linesep, '')
        debug(f'Token: {token}')
        method = 'PUT' if data else 'GET'
        url = f'https://api.github.com/repos/{self.repo}/{cmd.strip("/")}'
        headers = {'Authorization': f'token {token}', 'Accept': 'application/vnd.github.v3+json'}
        debug(f'Request: {method} {url}')
        params = json.dumps(data).encode('utf-8') if data else None
        req = urllib.request.Request(url, method=method, headers=headers, data=params)
        with urllib.request.urlopen(req) as res:
            data_raw = res.read().decode()
            debug(f'Raw answer [{res.status}]: {data_raw}')
            return json.loads(data_raw or '{}')

    @staticmethod
    def _encrypt_github_secret(public_key, secret_value):
        enc_key = public.PublicKey(public_key.encode('utf-8'), encoding.Base64Encoder())
        encrypted = public.SealedBox(enc_key).encrypt(f'{secret_value}'.encode("utf-8"))
        return b64encode(encrypted).decode("utf-8")

    def show_repo_secrets(self, name=None):
        debug(f'Try to read secrets from the "{self.repo}" GitHub repository')
        data = self._api_repo_call('/actions/secrets' + (f'/{name}' if name else '?per_page=500'))
        print(json.dumps(data, indent=2))

    def update_secrets(self, secret_file):
        debug(f'Try to update secrets in the "{self.repo}" GitHub repository from the "{secret_file}" file')
        if not secret_file or not Path(secret_file).exists():
            error('Incorrect parameters: file-with-secrets.json name is required and it should be exists')
            return 1
        print(f'Update {self.repo} secrets from the file {secret_file}')
        answer = (input('Do you want to continue (yes/No)? ') or 'no').lower()
        if answer != 'yes':
            print('Skip')
            return False
        secret_items = json.load(open(secret_file, 'r'))['secrets'] or []
        print(f'Found {len(secret_items)} items in the {secret_file} file.')
        data = self._api_repo_call('/actions/secrets/public-key')
        public_key = data['key']
        key_id = data['key_id']
        debug(f'Received: public-key={public_key}, key_id={key_id}')
        for secret_item in secret_items:
            name = secret_item['name']
            value = secret_item['value']
            value_enc = GitHubSecrets._encrypt_github_secret(public_key, value)
            print(f'- Secret: {name}')
            debug(f'   Value: {value_enc}')
            self._api_repo_call(f'/actions/secrets/{name}', {'encrypted_value': value_enc, 'key_id': key_id})
        print(f'Update {self.repo} secrets from the file {secret_file} - complete')
        return True


def main():
    try:
        argv = sys.argv
        argv.extend([None, None, None])
        cmd = argv[1] or ''
        if cmd == 'show':
            return GitHubSecrets(argv[2]).show_repo_secrets(argv[3])
        if cmd == 'update':
            return GitHubSecrets(argv[2]).update_secrets(argv[3])
        if not cmd or cmd.strip('-') == 'help':
            show_help()
        else:
            error(f'Error: unknown \'{cmd}\' command.')
    except urllib.error.HTTPError as ex:
        error(f'{ex}')
    except ValueError as ex:
        error(f'{ex}')
    return False


sys.exit(0 if main() else 1)
