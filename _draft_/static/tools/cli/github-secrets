#!/usr/bin/env python3
#==============================================================================
## Manage GitHub actions secrets: see all names, update secret values
## Note: GitHub api doesn"t provide a functionality to see the existing secret values.
##
## Usage: {SCRIPT} <show|update> <repository name> [secret-name] [file-with-secrets.json]
##
## The script need a personal access token to access the GitHub API.
## * Use a link https://github.com/settings/tokens to generate a new token with permissions:
##   [✓] repo - Full control of private repositories (all items)
##   [✓] workflow - Update GitHub Action workflows
##   [✓] read:org - Read org and team membership, read org projects
## * Use GITHUB_API_TOKEN system environment variable to store this token
##
## Example file-with-secrets.json file with new secrets:
## {
##   "secrets": [
##     {"name": "KEY1", "value": "1234" },
##   ]
## }
##
## Requirements:
## * pynacl
##
# Author: Evgen Rusakov, https://github.com/revgen
#
#==============================================================================
import json
import os
import sys
import urllib.request
from pathlib import Path
from base64 import b64encode
from nacl import encoding, public

error = lambda m: sys.stderr.write(f"{m}{os.linesep}")
debug = lambda m: sys.stderr.write(f"{m}{os.linesep}") if os.environ.get("DEBUG") == "true" else False


def show_help() -> None:
    script_file = Path(__file__)
    for l in [l for l in script_file.open().readlines()[:50] if l.startswith("##")]:
        print(l.lstrip("#").rstrip("\r\n").replace("{SCRIPT}", script_file.name))
    sys.exit(1)


class GitHubSecrets:
    def __init__(self, repo: str, token: str = None):
        if not repo:
            raise ValueError("Incorrect parameters: repository name is required")
        self.repo = repo
        self.token = token or os.environ.get("GITHUB_API_TOKEN")
        if not self.token:
            raise ValueError(f"GitHub API token is required")
        self._repo_key_id = None
        self._repo_public_key = None

    def _api_repo_call(self, cmd, data=None):
        debug(f"Token: {self.token}")
        method = "PUT" if data else "GET"
        url = f"https://api.github.com/repos/{self.repo}/{cmd.strip('/')}"
        headers = {"Authorization": f"token {self.token}", "Accept": "application/vnd.github.v3+json"}
        debug(f"Request: {method} {url}")
        params = json.dumps(data).encode("utf-8") if data else None
        req = urllib.request.Request(url, method=method, headers=headers, data=params)
        with urllib.request.urlopen(req) as res:
            data_raw = res.read().decode("utf-8")
            debug(f"Raw answer [{res.status}]: {data_raw}")
            return json.loads(data_raw or "{}")

    @staticmethod
    def _encrypt_github_secret(public_key, secret_value) -> str:
        enc_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
        encrypted = public.SealedBox(enc_key).encrypt(f"{secret_value}".encode("utf-8"))
        return b64encode(encrypted).decode("utf-8")

    def _read_repo_keys(self):
        if not self._repo_key_id:
            debug(f"Reading repository keys...")
            data = self._api_repo_call("/actions/secrets/public-key")
            self._repo_public_key = data["key"]
            self._repo_key_id = data["key_id"]
            debug(f"Received: public-key={self._repo_public_key}, key_id={self._repo_key_id}")

    def get_repo_secrets(self, name=None) -> str:
        debug(f"Try to read secrets from the \"{self.repo}\" GitHub repository")
        data = self._api_repo_call("/actions/secrets" + (f"/{name}" if name else "?per_page=500"))
        return data

    def update_secret(self, secret_key: str, secret_value: str) -> None:
        self._read_repo_keys()
        print(f"- Secret: {secret_key}")
        value_enc = GitHubSecrets._encrypt_github_secret(self._repo_public_key, secret_value)
        debug(f"   Value: {value_enc}")
        self._api_repo_call(f"/actions/secrets/{secret_key}",
                            {"encrypted_value": value_enc, "key_id": self._repo_key_id})        

    def update_secrets(self, value: str, silent: bool = False) -> bool:
        if value and "=" in value:
            key, value, *_ = value.split("=")
            self.update_secret(key, value)
            return True
        if not value:
            debug(f"Read secrets from the stdin")
            value = sys.stdin.read()
            silent = True
        elif not Path(value).exists():
            error(f"FileNotFound: {value}")
            return False
        else:
            debug(f"Read secrets from the f{value} file")
            value = open(value, "r").read()
        secret_items = json.loads(value)["secrets"] or []
        if not silent:
            answer = (input(f"Do you want to update {len(secret_items)} secrets (yes/No)? ") or "no").lower()
            if answer != "yes":
                print("Skip")
                return False
        print(f"Update {self.repo} secrets: {len(secret_items)} values")
        for secret_item in secret_items:
            self.update_secret(secret_item["name"], secret_item["value"])
        print(f"Update {self.repo} secrets  - complete")
        return True


def main():
    try:
        argv = sys.argv
        argv.extend([None, None, None])
        cmd = argv[1] or ""
        if cmd in ("show", "list", "ls"):
            secrets = GitHubSecrets(argv[2]).get_repo_secrets(argv[3])
            print(json.dumps(secrets, indent=2))
            return True
        if cmd in ("update", "set", "write"):
            return GitHubSecrets(argv[2]).update_secrets(argv[3])
        if not cmd or cmd.strip("-") == "help":
            show_help()
        else:
            error(f"Error: unknown \"{cmd}\" command.")
    except json.JSONDecodeError as ex:
        error(f"Incorrect source data format: {repr(ex)}")
    except (urllib.error.HTTPError, ValueError) as ex:
        error(repr(ex))
    return False


sys.exit(0 if main() else 1)
